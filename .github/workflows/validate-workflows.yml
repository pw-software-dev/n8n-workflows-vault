name: Validate Workflows

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Validate workflow structure
      run: pnpm validate-all-workflows

    - name: Check metadata consistency
      run: pnpm check-metadata-consistency

    - name: Validate README completeness
      run: pnpm validate-readme-completeness

    - name: Test README generation
      run: |
        cp -r workflows workflows-backup
        pnpm generate-readme
        # Check if READMEs were generated successfully
        find workflows -name "README.md" -type f | wc -l
        # Restore original READMEs to avoid git changes
        rm -rf workflows
        mv workflows-backup workflows

  security:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level high

    - name: Check for secrets in workflows
      run: |
        echo "🔍 Checking for potential secrets in workflow files..."
        # Check for common secret patterns in JSON files only (exclude README.md documentation)
        if grep -r -i "password\|secret\|token\|api_key" workflows/ --include="*.json" --exclude="README.md"; then
          echo "⚠️  Potential secrets found in workflow files"
          echo "Please ensure no actual secrets are committed to the repository"
          exit 1
        else
          echo "✅ No obvious secrets found in workflow JSON files"
        fi

  documentation:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check documentation completeness
      run: |
        echo "📋 Checking documentation completeness..."
        
        # Check if all workflows have README files
        missing_readmes=0
        
        # Check direct workflows (workflows/workflow-name/)
        for workflow_dir in workflows/*/; do
          if [ -d "$workflow_dir" ] && [ -f "$workflow_dir/workflow.json" ] && [ ! -f "$workflow_dir/README.md" ]; then
            echo "❌ Missing README.md in $workflow_dir"
            missing_readmes=$((missing_readmes + 1))
          fi
        done
        
        # Check categorized workflows (workflows/category/workflow-name/)
        for workflow_dir in workflows/*/*/; do
          if [ -d "$workflow_dir" ] && [ -f "$workflow_dir/workflow.json" ] && [ ! -f "$workflow_dir/README.md" ]; then
            echo "❌ Missing README.md in $workflow_dir"
            missing_readmes=$((missing_readmes + 1))
          fi
        done
        
        if [ $missing_readmes -gt 0 ]; then
          echo "📊 Found $missing_readmes workflows without README files"
          echo "💡 Run 'pnpm generate-readme' to auto-generate missing README files"
          exit 1
        else
          echo "✅ All workflows have README files"
        fi

    - name: Validate README structure
      run: |
        echo "🔍 Validating README structure..."
        
        # Check for required sections in README files
        invalid_readmes=0
        
        # Check direct workflows
        for readme in workflows/*/README.md; do
          if [ -f "$readme" ] && [ -f "${readme%/README.md}/workflow.json" ]; then
            if ! grep -q "## Overview" "$readme" || ! grep -q "## Technical Specification" "$readme"; then
              echo "❌ $readme missing required sections"
              invalid_readmes=$((invalid_readmes + 1))
            fi
          fi
        done
        
        # Check categorized workflows
        for readme in workflows/*/*/README.md; do
          if [ -f "$readme" ] && [ -f "${readme%/README.md}/workflow.json" ]; then
            if ! grep -q "## Overview" "$readme" || ! grep -q "## Technical Specification" "$readme"; then
              echo "❌ $readme missing required sections"
              invalid_readmes=$((invalid_readmes + 1))
            fi
          fi
        done
        
        if [ $invalid_readmes -gt 0 ]; then
          echo "📊 Found $invalid_readmes README files with missing sections"
          exit 1
        else
          echo "✅ All README files have required sections"
        fi

  quality-gates:
    runs-on: ubuntu-latest
    needs: [validate, security, documentation]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Quality gate summary
      run: |
        echo "🎯 Quality Gate Summary"
        echo "======================"
        echo "✅ Workflow validation passed"
        echo "✅ Metadata consistency verified"
        echo "✅ README completeness confirmed"
        echo "✅ Security audit passed"
        echo "✅ Documentation standards met"
        echo ""
        echo "🚀 All quality gates passed! Ready for merge."

  report:
    runs-on: ubuntu-latest
    needs: [validate, security, documentation]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate validation report
      run: |
        echo "📊 Workflow Repository Health Report" > validation-report.md
        echo "====================================" >> validation-report.md
        echo "" >> validation-report.md
        echo "**Repository:** ${{ github.repository }}" >> validation-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> validation-report.md
        echo "**Commit:** ${{ github.sha }}" >> validation-report.md
        echo "**Date:** $(date -u)" >> validation-report.md
        echo "" >> validation-report.md
        
        # Count workflows
        workflow_count=$(find workflows -name "workflow.json" | wc -l)
        category_count=$(find workflows -maxdepth 1 -type d | grep -v "^workflows$" | wc -l)
        
        echo "## Repository Statistics" >> validation-report.md
        echo "- **Total Workflows:** $workflow_count" >> validation-report.md
        echo "- **Categories:** $category_count" >> validation-report.md
        echo "" >> validation-report.md
        
        echo "## Validation Results" >> validation-report.md
        echo "- **Structure Validation:** ${{ needs.validate.result }}" >> validation-report.md
        echo "- **Security Check:** ${{ needs.security.result }}" >> validation-report.md
        echo "- **Documentation:** ${{ needs.documentation.result }}" >> validation-report.md
        echo "" >> validation-report.md
        
        cat validation-report.md

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-report
        path: validation-report.md
        retention-days: 30